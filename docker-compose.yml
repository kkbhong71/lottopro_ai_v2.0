version: '3.8'

services:
  # 메인 웹 애플리케이션
  web:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: lottopro_web
    ports:
      - "5000:5000"
    environment:
      - FLASK_ENV=${FLASK_ENV:-production}
      - SECRET_KEY=${SECRET_KEY}
      - REDIS_URL=redis://redis:6379/0
      - MONITORING_ENABLED=true
      - CACHE_TYPE=redis
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - RATE_LIMIT_ENABLED=true
    depends_on:
      - redis
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "healthcheck.py"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - lottopro_network

  # Redis 캐시 서버
  redis:
    image: redis:7.2-alpine
    container_name: lottopro_redis
    ports:
      - "6379:6379"
    command: >
      redis-server 
      --appendonly yes 
      --appendfsync everysec 
      --maxmemory 256mb 
      --maxmemory-policy allkeys-lru
      --tcp-keepalive 60
      --timeout 300
    volumes:
      - redis_data:/data
      - ./redis.conf:/usr/local/etc/redis/redis.conf:ro
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - lottopro_network
    sysctls:
      - net.core.somaxconn=1024
    ulimits:
      memlock: -1

  # Redis Insight (개발용 Redis 모니터링)
  redis-insight:
    image: redislabs/redisinsight:latest
    container_name: lottopro_redis_insight
    ports:
      - "8001:8001"
    environment:
      - RIPORT=8001
      - RIHOMEDIR=/opt/redisinsight
    volumes:
      - redis_insight_data:/opt/redisinsight
    depends_on:
      - redis
    restart: unless-stopped
    networks:
      - lottopro_network
    profiles:
      - development

  # 성능 모니터링 (Prometheus - 선택사항)
  prometheus:
    image: prom/prometheus:latest
    container_name: lottopro_prometheus
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=15d'
      - '--web.enable-lifecycle'
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    restart: unless-stopped
    networks:
      - lottopro_network
    profiles:
      - monitoring

  # 그라파나 대시보드 (선택사항)
  grafana:
    image: grafana/grafana:latest
    container_name: lottopro_grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
      - GF_INSTALL_PLUGINS=redis-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - lottopro_network
    profiles:
      - monitoring

  # Nginx 리버스 프록시 (프로덕션용)
  nginx:
    image: nginx:alpine
    container_name: lottopro_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - ./static:/usr/share/nginx/html/static:ro
    depends_on:
      - web
    restart: unless-stopped
    networks:
      - lottopro_network
    profiles:
      - production

  # 로그 수집 (Fluentd - 선택사항)
  fluentd:
    build:
      context: ./fluentd
      dockerfile: Dockerfile
    container_name: lottopro_fluentd
    ports:
      - "24224:24224"
      - "24224:24224/udp"
    volumes:
      - ./fluentd/conf:/fluentd/etc:ro
      - ./logs:/fluentd/log
    restart: unless-stopped
    networks:
      - lottopro_network
    profiles:
      - logging

volumes:
  redis_data:
    driver: local
  redis_insight_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  lottopro_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# 개발 환경 오버라이드 파일: docker-compose.override.yml
---
# Production 환경에서 사용할 별도 compose 파일
# 사용법:
# - 개발환경: docker-compose up
# - 프로덕션: docker-compose -f docker-compose.yml -f docker-compose.prod.yml up
# - 모니터링 포함: docker-compose --profile monitoring up
# - 전체 서비스: docker-compose --profile development --profile monitoring --profile production up

# 유용한 Docker Compose 명령어들:
# docker-compose up -d                    # 백그라운드 실행
# docker-compose up --build               # 빌드 후 실행
# docker-compose down                     # 서비스 중지 및 제거
# docker-compose down -v                  # 볼륨까지 제거
# docker-compose logs web                 # 특정 서비스 로그 확인
# docker-compose exec web bash            # 웹 컨테이너에 접속
# docker-compose exec redis redis-cli     # Redis CLI 접속
# docker-compose restart web              # 특정 서비스 재시작
# docker-compose ps                       # 실행 중인 서비스 확인
# docker-compose top                      # 컨테이너 프로세스 확인
